generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id           String         @id @default(cuid())
  name         String
  status       String         @default("active")
  createdAt    DateTime       @default(now())
  apps         App[]
  MessageGroup MessageGroup[]
  smsConfigs   SmsConfig[]
  smtpConfigs  SmtpConfig[]
  suppressions Suppression[]
}

model App {
  id           String         @id @default(cuid())
  tenantId     String
  name         String
  clientId     String         @unique
  createdAt    DateTime       @default(now())
  clientSecret String?
  tenant       Tenant         @relation(fields: [tenantId], references: [id])
  groups       MessageGroup[]
  smsConfigs   SmsConfig[]
  smtpConfigs  SmtpConfig[]

  @@index([tenantId], map: "App_tenantId_fkey")
}

model Template {
  id           String         @id @default(cuid())
  version      Int
  subject      String?        @db.MediumText
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  appId        String         @default("retreehawaii")
  content      String?        @db.MediumText
  title        String?        @db.VarChar(64)
  MessageGroup MessageGroup[]
}

model MessageGroup {
  id                  String      @id @default(cuid())
  tenantId            String
  appId               String
  templateId          String?
  subject             String
  bodyOverrideHtml    String?
  bodyOverrideText    String?
  status              String      @default("draft")
  scheduledAt         DateTime?
  startedAt           DateTime?
  completedAt         DateTime?
  createdBy           String?
  createdAt           DateTime    @default(now())
  totalRecipients     Int         @default(0)
  processedRecipients Int         @default(0)
  sentCount           Int         @default(0)
  failedCount         Int         @default(0)
  canceledAt          DateTime?
  lockVersion         Int         @default(0)
  events              Event[]
  app                 App         @relation(fields: [appId], references: [id], onDelete: Cascade)
  template            Template?   @relation(fields: [templateId], references: [id])
  tenant              Tenant      @relation(fields: [tenantId], references: [id])
  recipients          Recipient[]

  @@index([appId], map: "MessageGroup_appId_fkey")
  @@index([templateId], map: "MessageGroup_templateId_fkey")
  @@index([tenantId], map: "MessageGroup_tenantId_fkey")
}

model Recipient {
  id              String       @id @default(cuid())
  groupId         String
  email           String
  name            String?
  context         String       @db.LongText
  status          String       @default("pending")
  lastError       String?
  createdAt       DateTime     @default(now())
  renderedSubject String?
  renderedHtml    String?
  renderedText    String?
  failedAttempts  Int          @default(0)
  events          Event[]
  messages        Message[]
  group           MessageGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, email])
  @@index([groupId, status])
}

model Message {
  id           String    @id @default(cuid())
  recipientId  String
  providerId   String?
  sentAt       DateTime?
  openedAt     DateTime?
  createdAt    DateTime  @default(now())
  attemptCount Int       @default(1)
  lastError    String?
  recipient    Recipient @relation(fields: [recipientId], references: [id], onDelete: Cascade)

  @@index([recipientId], map: "Message_recipientId_fkey")
}

model Event {
  id          String        @id @default(cuid())
  recipientId String?
  groupId     String?
  type        String
  occurredAt  DateTime      @default(now())
  meta        String?       @db.LongText
  createdAt   DateTime      @default(now())
  group       MessageGroup? @relation(fields: [groupId], references: [id], onDelete: Cascade, map: "Event_groupId_fkey")
  recipient   Recipient?    @relation(fields: [recipientId], references: [id], onDelete: Cascade, map: "Event_recipientId_fkey")

  @@index([type])
  @@index([groupId])
  @@index([recipientId], map: "Event_recipientId_fkey")
}

model Suppression {
  id       String   @id @default(cuid())
  tenantId String
  email    String
  reason   String?
  addedAt  DateTime @default(now())
  tenant   Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId, email])
}

model SmtpConfig {
  id           String          @id @default(cuid())
  scope        SmtpConfigScope
  tenantId     String?
  appId        String?
  host         String
  port         Int             @default(587)
  secure       Boolean         @default(false)
  user         String?
  pass         String?
  fromAddress  String?
  fromName     String?
  service      String          @default("smtp")
  awsRegion    String?
  awsAccessKey String?
  awsSecretKey String?
  isActive     Boolean         @default(true)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  createdBy    String?
  app          App?            @relation(fields: [appId], references: [id], onDelete: Cascade)
  tenant       Tenant?         @relation(fields: [tenantId], references: [id])

  @@index([scope, tenantId, appId])
  @@index([scope, isActive])
  @@index([appId], map: "SmtpConfig_appId_fkey")
  @@index([tenantId], map: "SmtpConfig_tenantId_fkey")
}

model SmsConfig {
  id         String         @id @default(cuid())
  scope      SmsConfigScope
  tenantId   String?
  appId      String?
  sid        String
  token      String
  fromNumber String
  fallbackTo String?
  serviceSid String?
  isActive   Boolean        @default(true)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  createdBy  String?
  app        App?           @relation(fields: [appId], references: [id], onDelete: Cascade)
  tenant     Tenant?        @relation(fields: [tenantId], references: [id])

  @@index([scope, tenantId, appId])
  @@index([scope, isActive])
  @@index([appId], map: "SmsConfig_appId_fkey")
  @@index([tenantId], map: "SmsConfig_tenantId_fkey")
}

model EmailJob {
  id           String    @id @default(cuid())
  jobId        String?   @unique(map: "jobId") @db.VarChar(20)
  groupId      String?   @db.VarChar(20)
  appId        String?
  status       String?   @default("pending") @db.VarChar(20)
  scheduledAt  DateTime? @db.DateTime(0)
  startedAt    DateTime? @db.DateTime(0)
  completedAt  DateTime? @db.DateTime(0)
  failedAt     DateTime? @db.DateTime(0)
  lastError    String?   @db.Text
  attemptCount Int?      @default(0)
  maxAttempts  Int?      @default(3)
  subject      String?   @db.VarChar(128)
  senderName   String?   @db.VarChar(64)
  senderEmail  String?   @db.VarChar(64)
  host         String?   @db.VarChar(64)
  username     String?   @db.VarChar(64)
  recipients   String?   @db.MediumText
  message      String?   @db.MediumText
  createdAt    DateTime? @default(now()) @db.DateTime(0)
  updatedAt    DateTime? @default(now()) @updatedAt @db.DateTime(0)

  @@index([appId, status], map: "idx_app_status")
  @@index([createdAt], map: "idx_created")
  @@index([groupId, status], map: "idx_group_status")
  @@index([status, scheduledAt], map: "idx_status_scheduled")
}

model Maillog {
  id          String    @id @default(cuid())
  messageId   String?   @unique(map: "messageId") @db.VarChar(255)
  groupId     String?   @db.VarChar(20)
  appId       String?
  sent        DateTime? @default(now()) @db.DateTime(0)
  subject     String?   @db.VarChar(128)
  senderName  String?   @db.VarChar(64)
  senderEmail String?   @db.VarChar(64)
  host        String?   @db.VarChar(64)
  username    String?   @db.VarChar(64)
  recipients  String?   @db.MediumText
  message     String?   @db.MediumText
  opened      DateTime? @db.DateTime(0)
  createdAt   DateTime? @default(now()) @db.DateTime(0)

  @@index([appId, sent], map: "idx_appId_sent")
  @@index([groupId], map: "idx_groupId")
  @@index([messageId], map: "idx_messageId")
}

model Smslog {
  id           String    @id @default(cuid())
  messageId    String?   @unique(map: "messageId") @db.VarChar(255)
  groupId      String?   @db.VarChar(20)
  appId        String?
  sent         DateTime? @default(now()) @db.DateTime(0)
  senderName   String?   @db.VarChar(64)
  senderPhone  String?   @db.VarChar(32)
  recipients   String?   @db.MediumText
  message      String?   @db.MediumText
  delivered    DateTime? @db.DateTime(0)
  failed       DateTime? @db.DateTime(0)
  errorCode    String?   @db.VarChar(32)
  errorMessage String?   @db.Text
  createdAt    DateTime? @default(now()) @db.DateTime(0)

  @@index([appId, sent], map: "idx_sms_appId_sent")
  @@index([groupId], map: "idx_sms_groupId")
  @@index([messageId], map: "idx_sms_messageId")
}

enum SmtpConfigScope {
  GLOBAL
  TENANT
  APP
}

enum SmsConfigScope {
  GLOBAL
  TENANT
  APP
}
