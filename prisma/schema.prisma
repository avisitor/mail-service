// Prisma schema (initial draft)
// Switch provider or refine types as needed.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String    @id @default(cuid())
  name      String
  status    String    @default("active")
  createdAt DateTime  @default(now())
  apps      App[]
  templates Template[]
  groups    MessageGroup[]
  suppressions Suppression[]
  smtpConfigs SmtpConfig[]
}

model App {
  id        String   @id @default(cuid())
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  tenantId  String
  name      String
  clientId  String   @unique
  createdAt DateTime @default(now())
  groups    MessageGroup[]
  smtpConfigs SmtpConfig[]
}

model Template {
  id          String   @id @default(cuid())
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  tenantId    String
  name        String
  version     Int
  subject     String
  bodyHtml    String
  bodyText    String?
  variables   Json
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  groups      MessageGroup[]
  @@unique([tenantId, name, version])
}

model MessageGroup {
  id           String      @id @default(cuid())
  tenant       Tenant      @relation(fields: [tenantId], references: [id])
  tenantId     String
  app          App         @relation(fields: [appId], references: [id])
  appId        String
  template     Template?   @relation(fields: [templateId], references: [id])
  templateId   String?
  subject      String
  bodyOverrideHtml String?
  bodyOverrideText String?
  status       String      @default("draft") // draft|scheduled|processing|complete|failed|canceled
  scheduledAt  DateTime?
  startedAt    DateTime?
  completedAt  DateTime?
  createdBy    String?
  createdAt    DateTime    @default(now())
  totalRecipients       Int @default(0)
  processedRecipients   Int @default(0)
  sentCount             Int @default(0)
  failedCount           Int @default(0)
  canceledAt            DateTime?
  lockVersion           Int @default(0)
  recipients   Recipient[]
  events       Event[]
}

model Recipient {
  id          String       @id @default(cuid())
  group       MessageGroup @relation(fields: [groupId], references: [id])
  groupId     String
  email       String
  name        String?
  context     Json
  status      String       @default("pending") // pending|rendered|sent|failed|skipped
  lastError   String?
  createdAt   DateTime     @default(now())
  renderedSubject String?
  renderedHtml    String?
  renderedText    String?
  failedAttempts  Int @default(0)
  messages    Message[]
  events      Event[]
  @@index([groupId, status])
  @@unique([groupId, email])
}

model Message {
  id          String    @id @default(cuid())
  recipient   Recipient @relation(fields: [recipientId], references: [id])
  recipientId String
  providerId  String?
  sentAt      DateTime?
  openedAt    DateTime?
  createdAt   DateTime  @default(now())
  attemptCount Int @default(1)
  lastError    String?
}

model Event {
  id          String       @id @default(cuid())
  recipient   Recipient?   @relation(fields: [recipientId], references: [id])
  recipientId String?
  group       MessageGroup? @relation(fields: [groupId], references: [id])
  groupId     String?
  type        String
  occurredAt  DateTime  @default(now())
  meta        Json?
  createdAt   DateTime  @default(now())
  @@index([type])
}

model Suppression {
  id        String   @id @default(cuid())
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  tenantId  String
  email     String
  reason    String?
  addedAt   DateTime @default(now())
  @@index([tenantId, email])
}

enum SmtpConfigScope { 
  GLOBAL 
  TENANT 
  APP 
}

model SmtpConfig {
  id          String         @id @default(cuid())
  scope       SmtpConfigScope
  tenantId    String?        // null for GLOBAL scope
  appId       String?        // null for GLOBAL/TENANT scope
  tenant      Tenant?        @relation(fields: [tenantId], references: [id])
  app         App?           @relation(fields: [appId], references: [id])
  
  // SMTP settings
  host        String
  port        Int            @default(587)
  secure      Boolean        @default(false)
  user        String?
  pass        String?        // encrypted in implementation
  fromAddress String?
  fromName    String?
  
  // Service selection (for future SES support)
  service     String         @default("smtp") // smtp|ses
  
  // SES-specific settings (future use)
  awsRegion   String?
  awsAccessKey String?       // encrypted in implementation  
  awsSecretKey String?       // encrypted in implementation
  
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  createdBy   String?        // user sub who created this config
  
  @@unique([scope, tenantId, appId])
  @@index([scope, tenantId, appId])
}
